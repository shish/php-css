<?php

namespace TBela\CSS\Value;

use TBela\CSS\Value;

/**
 * Css string value
 * @package TBela\CSS\Value
 */
class BackgroundSize extends Value
{

    use ValueTrait {

        ValueTrait::doParse as reParse;
    }

    protected static array $keywords = [
        'contain',
        'auto',
        'cover'
    ];

    protected static array $defaults = ['auto'];

    /**
     * @var array
     * @ignore
     */
    protected static array $patterns = [

        'keyword',
        [
            ['type' => 'unit'],
            ['type' => 'unit', 'optional' => true]
        ]
    ];

    public static function matchKeyword(string $string, array $keywords = null): ?string
    {
        $string = preg_replace('#\s+#', ' ', $string);

        if (trim($string) == 'auto auto') {

            $string = 'auto';
        }

        return parent::matchKeyword($string, $keywords); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public static function doParse(string $string, bool $capture_whitespace = true, $context = '', $contextName = ''): Set
    {

        $tokens = static::reParse($string, $capture_whitespace, $context, $contextName);

        $sets = $tokens->split(',');

        foreach ($sets as $key => $set) {

            $set = $sets[$key] = $set->toArray();

            // remove defaults
            $i = count($set);

            while ($i-- > 1) {

                if (static::matchDefaults($set[$i])) {

                    unset($sets[$key][$i]);
                    continue;
                }

                break;
            }
        }

        $set = new Set();

        $i = -1;
        $j = count($sets) - 1;

        while (++$i < $j) {

            $set->merge(new Set(static::reduce($sets[$i])))->add(Value::getInstance((object) ['type' => 'separator', 'value' => ',']));
        }

        $set->merge(new Set(static::reduce($sets[$j])));

        return $set;
    }
}
