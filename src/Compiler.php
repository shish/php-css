<?php 

namespace TBela\CSS;

use Exception;

/**
 * Css Compiler
 * @package TBela\CSS
 */
class Compiler {

    /**
     *
     * @var array|string[]
     * @ignore
     */
    protected array $properties = [
        'glue',
        'indent',
        'charset',
        'compress',
        'css_level',
        'separator',
        'convert_color',
        'remove_comments',
        'remove_empty_nodes',
        'allow_duplicate_declarations'
    ];

    /**
     * @var array
     * @ignore
     */
    protected array $options = [];

    /**
     * @var Element
     * @ignore
     */
	protected Element $data;

    /**
     * Compiler constructor.
     * @param array $options
     */
	public function __construct (array $options = []) {

		$this->setOptions($options);
	}

    /**
     * set compiler options
     * @param array $options
     * @return $this
     */
	public function setOptions (array $options) {

	    foreach ($options as $key => $value) {

	        if (in_array($key, $this->properties)) {

	            $this->options[$key] = $value;
            }
        }

	    return $this;
    }

    public function getOptions(): array {

	    return $this->options;
    }

    /**
     * set css content
     * @param string $css
     * @return Compiler
     * @throws Exception
     */
	public function setContent ($css) {

	    $this->data = Element::getInstance((new Parser($css, $this->options))->parse());
	    return $this;
    }

    /**
     * load css content from a file
     * @param string $file
     * @return $this
     * @throws Exception
     */
    public function load ($file) {

        $this->data = Element::getInstance((new Parser('', $this->options))->load($file)->parse());
        return $this;
    }

    /**
     * load content from an element or AST
     * @param Element|object $ast
     * @return Compiler
     */
	public function setData ($ast) {

		$this->data = Element::getInstance($ast);
		return $this;
	}

    /**
     * return the element generated by the css parser
     * @return Element
     */
    public function getData () {

        return $this->data;
    }

    /**
     * compile css
     * @return string
     * @throws Exception
     */
	public function compile () {

		if (isset($this->data)) {

			return (new Renderer($this->options))->render($this->data);
		}

		return '';
	}
}
